import logging
import redis
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.models.base import get_db
from app.models.user import User
from app.core.security import verify_password, create_access_token
from app.crud.user import get_user_by_username
from app.schemas.user import UserCreate
from fastapi.security import OAuth2PasswordBearer
import jwt
from redis.exceptions import RedisError
from datetime import timedelta
from app.core.config import settings

try:
    redis_client = redis.Redis(host="localhost", port=6379, db=0, decode_responses=True)
    redis_client.ping()
except RedisError:
    logging.critical("üö® –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä Redis –∑–∞–ø—É—â–µ–Ω.")
    redis_client = None  # –û—Ç–∫–ª—é—á–∞–µ–º Redis, —á—Ç–æ–±—ã –∫–æ–¥ –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–µ–≥–æ

router = APIRouter()
logging.basicConfig(level=logging.INFO)

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


@router.post("/token", summary="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def login(user: UserCreate, db: Session = Depends(get_db)):
    """
    **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
    - üîë –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.
    - üé´ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º API.
    - ‚ùå –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–µ.
    """
    logging.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")

    db_user = get_user_by_username(db, user.username)

    if not db_user or not verify_password(user.password, db_user.hashed_password):
        logging.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        raise HTTPException(status_code=400, detail="Invalid username or password")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(data={"sub": db_user.username}, expires_delta=access_token_expires)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ Redis, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if redis_client:
        try:
            redis_client.setex(f"token:{db_user.username}", settings.ACCESS_TOKEN_EXPIRE_MINUTES * 60, access_token)
            logging.info(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.username} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis")
        except RedisError:
            logging.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤ Redis")

    logging.info(f"‚úÖ –í—ã–¥–∞–Ω —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {db_user.username}")
    return {"access_token": access_token, "token_type": "bearer"}

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/token")

@router.get("/protected")
async def protected_route(token: str = Depends(oauth2_scheme)):
    """
    **–ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç**
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ Redis.
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.
    """
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        user_id = payload.get("sub")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ Redis (–µ—Å–ª–∏ Redis –¥–æ—Å—Ç—É–ø–µ–Ω)
        if redis_client:
            stored_token = redis_client.get(f"token:{user_id}")
            if stored_token is None:
                logging.error(f"‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                raise HTTPException(status_code=401, detail="Invalid token")

            if stored_token != token:
                logging.error(f"‚ùå –¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ö—Ä–∞–Ω–∏–º—ã–º –≤ Redis")
                raise HTTPException(status_code=401, detail="Invalid token")

        logging.info(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return {"message": f"–ü—Ä–∏–≤–µ—Ç, {user_id}! –¢–≤–æ–π —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."}

    except jwt.PyJWTError:
        logging.error("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        raise HTTPException(status_code=401, detail="Invalid token")


@router.post("/logout")
async def logout(token: str = Depends(oauth2_scheme)):
    """
    **–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã**
    - –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ Redis.
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω—ã–º.
    """
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        user_id = payload.get("sub")

        if redis_client:
            try:
                if redis_client.delete(f"token:{user_id}"):
                    logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã, —Ç–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω –∏–∑ Redis")
                    return {"message": "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}
                else:
                    logging.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞: —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Redis")
                    return {"message": "–¢–æ–∫–µ–Ω —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
            except RedisError:
                logging.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ Redis")

        return {"message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –Ω–æ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}

    except jwt.ExpiredSignatureError:
        logging.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ —Å —É–∂–µ –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º")
        return {"message": "–í—ã —É–∂–µ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫)"}