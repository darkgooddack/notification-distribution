import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import json
import pika
import logging
from app.models.user import User
from app.models.notification import Notification, user_notifications
from sqlalchemy.orm import Session
from app.models.base import get_db, SessionLocal

def process_notification(message, db: Session):
    # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –ø–æ ID
    notification = db.query(Notification).filter(Notification.id == message['notification_id']).first()

    if not notification:
        logging.error(f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID {message['notification_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    users = db.query(User).filter(User.receive_notifications == True).all()

    if not users:
        logging.info("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user in users:
        logging.info(
            f"üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} ({user.email}): {notification.title} - {notification.message}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        user_notification = user_notifications.insert().values(user_id=user.id, notification_id=notification.id)
        db.execute(user_notification)
        db.commit()
        logging.info(f"‚úÖ –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É")


def callback(ch, method, properties, body):
    message = json.loads(body)
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {message}")

    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()

    try:
        process_notification(message, db)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    finally:
        db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
connection = pika.BlockingConnection(pika.ConnectionParameters(host="localhost"))
channel = connection.channel()

# –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏
channel.queue_declare(queue="notification_tasks")

# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥—å
channel.basic_consume(queue="notification_tasks", on_message_callback=callback, auto_ack=True)

logging.info("üéß –û–∂–∏–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
channel.start_consuming()
